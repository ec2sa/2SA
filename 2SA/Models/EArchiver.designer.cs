#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eArchiver.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="2SADev")]
	public partial class EArchiverDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUsersInGroup(UsersInGroup instance);
    partial void UpdateUsersInGroup(UsersInGroup instance);
    partial void DeleteUsersInGroup(UsersInGroup instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupsInRole(GroupsInRole instance);
    partial void UpdateGroupsInRole(GroupsInRole instance);
    partial void DeleteGroupsInRole(GroupsInRole instance);
    partial void InsertScanPreview(ScanPreview instance);
    partial void UpdateScanPreview(ScanPreview instance);
    partial void DeleteScanPreview(ScanPreview instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertScan(Scan instance);
    partial void UpdateScan(Scan instance);
    partial void DeleteScan(Scan instance);
    partial void InsertInfoTypeTwo(InfoTypeTwo instance);
    partial void UpdateInfoTypeTwo(InfoTypeTwo instance);
    partial void DeleteInfoTypeTwo(InfoTypeTwo instance);
    partial void InsertHeader(Header instance);
    partial void UpdateHeader(Header instance);
    partial void DeleteHeader(Header instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertUsersInClient(UsersInClient instance);
    partial void UpdateUsersInClient(UsersInClient instance);
    partial void DeleteUsersInClient(UsersInClient instance);
    partial void InsertOcrContent(OcrContent instance);
    partial void UpdateOcrContent(OcrContent instance);
    partial void DeleteOcrContent(OcrContent instance);
    partial void InsertOcrLogEntry(OcrLogEntry instance);
    partial void UpdateOcrLogEntry(OcrLogEntry instance);
    partial void DeleteOcrLogEntry(OcrLogEntry instance);
    partial void InsertType2(Type2 instance);
    partial void UpdateType2(Type2 instance);
    partial void DeleteType2(Type2 instance);
    partial void InsertInfoTypeOne(InfoTypeOne instance);
    partial void UpdateInfoTypeOne(InfoTypeOne instance);
    partial void DeleteInfoTypeOne(InfoTypeOne instance);
    partial void InsertDocumentSender(DocumentSender instance);
    partial void UpdateDocumentSender(DocumentSender instance);
    partial void DeleteDocumentSender(DocumentSender instance);
    partial void InsertSender(Sender instance);
    partial void UpdateSender(Sender instance);
    partial void DeleteSender(Sender instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertDocumentHistory(DocumentHistory instance);
    partial void UpdateDocumentHistory(DocumentHistory instance);
    partial void DeleteDocumentHistory(DocumentHistory instance);
    #endregion
		
		public EArchiverDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ApplicationServices"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EArchiverDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EArchiverDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EArchiverDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EArchiverDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UsersInGroup> UsersInGroups
		{
			get
			{
				return this.GetTable<UsersInGroup>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupsInRole> GroupsInRoles
		{
			get
			{
				return this.GetTable<GroupsInRole>();
			}
		}
		
		public System.Data.Linq.Table<ScanPreview> ScanPreviews
		{
			get
			{
				return this.GetTable<ScanPreview>();
			}
		}
		
		public System.Data.Linq.Table<AvailableScan> AvailableScans
		{
			get
			{
				return this.GetTable<AvailableScan>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<Scan> Scans
		{
			get
			{
				return this.GetTable<Scan>();
			}
		}
		
		public System.Data.Linq.Table<InfoTypeTwo> InfoTypeTwos
		{
			get
			{
				return this.GetTable<InfoTypeTwo>();
			}
		}
		
		public System.Data.Linq.Table<Header> Headers
		{
			get
			{
				return this.GetTable<Header>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<UsersInClient> UsersInClients
		{
			get
			{
				return this.GetTable<UsersInClient>();
			}
		}
		
		public System.Data.Linq.Table<OcrContent> OcrContents
		{
			get
			{
				return this.GetTable<OcrContent>();
			}
		}
		
		public System.Data.Linq.Table<OcrLogEntry> OcrLogEntries
		{
			get
			{
				return this.GetTable<OcrLogEntry>();
			}
		}
		
		public System.Data.Linq.Table<Type2> Type2s
		{
			get
			{
				return this.GetTable<Type2>();
			}
		}
		
		public System.Data.Linq.Table<InfoTypeOne> InfoTypeOnes
		{
			get
			{
				return this.GetTable<InfoTypeOne>();
			}
		}
		
		public System.Data.Linq.Table<DocumentInfo> DocumentInfos
		{
			get
			{
				return this.GetTable<DocumentInfo>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSender> DocumentSenders
		{
			get
			{
				return this.GetTable<DocumentSender>();
			}
		}
		
		public System.Data.Linq.Table<Sender> Senders
		{
			get
			{
				return this.GetTable<Sender>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<DocumentHistory> DocumentHistories
		{
			get
			{
				return this.GetTable<DocumentHistory>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pRemoveUserFromGroup")]
		public int RemoveUserFromGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pAddRoleToGroup")]
		public int AddRoleToGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="NVarChar(256)")] string roleName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, roleName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pAddUserToGroup")]
		public int AddUserToGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pRemoveRoleFromGroup")]
		public int RemoveRoleFromGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="NVarChar(256)")] string roleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleName, groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pGetGroupRoles")]
		public ISingleResult<pGetGroupRolesResult> GetGroupRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((ISingleResult<pGetGroupRolesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Dictionaries.pDeleteCategory")]
		public int DeleteCategory([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CategoryID", DbType="Int")] System.Nullable<int> categoryID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), categoryID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Dictionaries.pDeleteType")]
		public int DeleteType([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TypeID", DbType="Int")] System.Nullable<int> typeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pAddScanToRecycleBin")]
		public int AddScanToRecycleBin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScanGuid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> scanGuid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scanGuid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pDeleteScanFromRecycleBin")]
		public int DeleteScanFromRecycleBin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScanGuid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> scanGuid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scanGuid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pRestoreScanFromRecycleBin")]
		public int RestoreScanFromRecycleBin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScanGuid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> scanGuid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scanGuid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pGetScansFromDocument")]
		public ISingleResult<pGetScansFromDocumentResult> GetScansFromDocument([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> documentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), documentID);
			return ((ISingleResult<pGetScansFromDocumentResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pGetScanSiblings")]
		public ISingleResult<pGetScanSiblingsResult> GetScanSiblings([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> scanid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scanid);
			return ((ISingleResult<pGetScanSiblingsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pGetCID")]
		public ISingleResult<pGetCIDResult> GetCID([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userGuid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userGuid);
			return ((ISingleResult<pGetCIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pCreateDocument")]
		public int CreateDocument([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Author", DbType="UniqueIdentifier")] System.Nullable<System.Guid> author, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientID", DbType="Int")] System.Nullable<int> clientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DocumentID", DbType="UniqueIdentifier")] ref System.Nullable<System.Guid> documentID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), author, clientID, documentID);
			documentID = ((System.Nullable<System.Guid>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pCreateClient")]
		public int CreateClient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientName", DbType="VarChar(100)")] string clientName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientDescription", DbType="VarChar(1000)")] string clientDescription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientPrefix", DbType="VarChar(10)")] string clientPrefix, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientName, clientDescription, clientPrefix, isActive);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pGetUserRolesInClient")]
		public ISingleResult<pGetUserRolesInClientResult> GetUserRolesInClient([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> clientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, clientID);
			return ((ISingleResult<pGetUserRolesInClientResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Configuration.pCreateGroup")]
		public int CreateGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="NVarChar(256)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> clientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewId", DbType="UniqueIdentifier")] ref System.Nullable<System.Guid> newId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupName, clientID, newId);
			newId = ((System.Nullable<System.Guid>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pCheckQuota")]
		public ISingleResult<pCheckQuotaResult> CheckQuota([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string propertyName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), propertyName);
			return ((ISingleResult<pCheckQuotaResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.pOCRGetConfiguration")]
		public ISingleResult<pOCRGetConfigurationResult> OCRGetConfiguration()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<pOCRGetConfigurationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.pOCRSaveConfiguration")]
		public int OCRSaveConfiguration([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ocrStartHour, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ocrEndHour, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string ocrEnabled)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ocrStartHour, ocrEndHour, ocrEnabled);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.pOCRSaveTextContent")]
		public int OCRSaveTextContent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ScanID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> scanID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string textContent)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), scanID, textContent);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Documents.pAddScanVersion")]
		public int AddScanVersion([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="UniqueIdentifier")] System.Nullable<System.Guid> originalScanID, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string fileName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string mimeType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary fileContent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary previewContent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string previewMimeType, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarBinary(MAX)")] System.Data.Linq.Binary zoomContent, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> clientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), originalScanID, fileName, mimeType, fileContent, previewContent, previewMimeType, zoomContent, clientID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="Dictionaries.pDeleteType2")]
		public int DeleteType2([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Type2ID", DbType="Int")] System.Nullable<int> type2ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), type2ID);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Configuration.tUsersInGroups")]
	public partial class UsersInGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _GroupId;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(System.Guid value);
    partial void OnGroupIdChanged();
    #endregion
		
		public UsersInGroup()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UsersInGroup", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UsersInGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UsersInGroups.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Configuration.tGroups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupId;
		
		private string _GroupName;
		
		private string _Description;
		
		private int _ClientID;
		
		private EntitySet<UsersInGroup> _UsersInGroups;
		
		private EntitySet<GroupsInRole> _GroupsInRoles;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(System.Guid value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Group()
		{
			this._UsersInGroups = new EntitySet<UsersInGroup>(new Action<UsersInGroup>(this.attach_UsersInGroups), new Action<UsersInGroup>(this.detach_UsersInGroups));
			this._GroupsInRoles = new EntitySet<GroupsInRole>(new Action<GroupsInRole>(this.attach_GroupsInRoles), new Action<GroupsInRole>(this.detach_GroupsInRoles));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="int")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UsersInGroup", Storage="_UsersInGroups", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<UsersInGroup> UsersInGroups
		{
			get
			{
				return this._UsersInGroups;
			}
			set
			{
				this._UsersInGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupsInRole", Storage="_GroupsInRoles", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<GroupsInRole> GroupsInRoles
		{
			get
			{
				return this._GroupsInRoles;
			}
			set
			{
				this._GroupsInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Group", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UsersInGroups(UsersInGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupsInRoles(GroupsInRole entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupsInRoles(GroupsInRole entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Configuration.tGroupsInRole")]
	public partial class GroupsInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupId;
		
		private System.Guid _RoleId;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(System.Guid value);
    partial void OnGroupIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public GroupsInRole()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupsInRole", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupsInRoles.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupsInRoles.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tScanPreview")]
	public partial class ScanPreview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ScanPreviewID;
		
		private System.Guid _ScanID;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _ScanPreviewContent;
		
		private string _MimeType;
		
		private EntityRef<Scan> _Scan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScanPreviewIDChanging(System.Guid value);
    partial void OnScanPreviewIDChanged();
    partial void OnScanIDChanging(System.Guid value);
    partial void OnScanIDChanged();
    partial void OnScanPreviewContentChanging(System.Data.Linq.Binary value);
    partial void OnScanPreviewContentChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    #endregion
		
		public ScanPreview()
		{
			this._Scan = default(EntityRef<Scan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanPreviewID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid ScanPreviewID
		{
			get
			{
				return this._ScanPreviewID;
			}
			set
			{
				if ((this._ScanPreviewID != value))
				{
					this.OnScanPreviewIDChanging(value);
					this.SendPropertyChanging();
					this._ScanPreviewID = value;
					this.SendPropertyChanged("ScanPreviewID");
					this.OnScanPreviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScanID
		{
			get
			{
				return this._ScanID;
			}
			set
			{
				if ((this._ScanID != value))
				{
					if (this._Scan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScanIDChanging(value);
					this.SendPropertyChanging();
					this._ScanID = value;
					this.SendPropertyChanged("ScanID");
					this.OnScanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanPreviewContent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ScanPreviewContent
		{
			get
			{
				return this._ScanPreviewContent.Value;
			}
			set
			{
				if ((this._ScanPreviewContent.Value != value))
				{
					this.OnScanPreviewContentChanging(value);
					this.SendPropertyChanging();
					this._ScanPreviewContent.Value = value;
					this.SendPropertyChanged("ScanPreviewContent");
					this.OnScanPreviewContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="VarChar(100)")]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scan_ScanPreview", Storage="_Scan", ThisKey="ScanID", OtherKey="ScanID", IsForeignKey=true)]
		public Scan Scan
		{
			get
			{
				return this._Scan.Entity;
			}
			set
			{
				Scan previousValue = this._Scan.Entity;
				if (((previousValue != value) 
							|| (this._Scan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scan.Entity = null;
						previousValue.ScanPreviews.Remove(this);
					}
					this._Scan.Entity = value;
					if ((value != null))
					{
						value.ScanPreviews.Add(this);
						this._ScanID = value.ScanID;
					}
					else
					{
						this._ScanID = default(System.Guid);
					}
					this.SendPropertyChanged("Scan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.vAvailableScans")]
	public partial class AvailableScan
	{
		
		private System.Guid _ScanID;
		
		private System.Nullable<System.Guid> _ScanPreviewID;
		
		private string _FileName;
		
		private string _Description;
		
		private string _MimeType;
		
		private string _PreviewMimeType;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _ScanPreviewContent;
		
		private System.DateTime _ImportDate;
		
		private int _ClientID;
		
		private int _PageCount;
		
		public AvailableScan()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScanID
		{
			get
			{
				return this._ScanID;
			}
			set
			{
				if ((this._ScanID != value))
				{
					this._ScanID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanPreviewID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScanPreviewID
		{
			get
			{
				return this._ScanPreviewID;
			}
			set
			{
				if ((this._ScanPreviewID != value))
				{
					this._ScanPreviewID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this._FileName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="VarChar(100)")]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this._MimeType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreviewMimeType", DbType="VarChar(100)")]
		public string PreviewMimeType
		{
			get
			{
				return this._PreviewMimeType;
			}
			set
			{
				if ((this._PreviewMimeType != value))
				{
					this._PreviewMimeType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanPreviewContent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ScanPreviewContent
		{
			get
			{
				return this._ScanPreviewContent.Value;
			}
			set
			{
				if ((this._ScanPreviewContent.Value != value))
				{
					this._ScanPreviewContent.Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImportDate", DbType="smalldatetime not null")]
		public System.DateTime ImportDate
		{
			get
			{
				return this._ImportDate;
			}
			set
			{
				if ((this._ImportDate != value))
				{
					this._ImportDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="int")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageCount", DbType="int")]
		public int PageCount
		{
			get
			{
				return this._PageCount;
			}
			set
			{
				if ((this._PageCount != value))
				{
					this._PageCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Dictionaries.tCategory")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private int _ClientID;
		
		private EntitySet<Type> _Types;
		
		private EntitySet<InfoTypeOne> _InfoTypeOnes;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Category()
		{
			this._Types = new EntitySet<Type>(new Action<Type>(this.attach_Types), new Action<Type>(this.detach_Types));
			this._InfoTypeOnes = new EntitySet<InfoTypeOne>(new Action<InfoTypeOne>(this.attach_InfoTypeOnes), new Action<InfoTypeOne>(this.detach_InfoTypeOnes));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="int")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Type", Storage="_Types", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Type> Types
		{
			get
			{
				return this._Types;
			}
			set
			{
				this._Types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_InfoTypeOne", Storage="_InfoTypeOnes", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<InfoTypeOne> InfoTypeOnes
		{
			get
			{
				return this._InfoTypeOnes;
			}
			set
			{
				this._InfoTypeOnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Category", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Dictionaries.tType")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private int _CategoryID;
		
		private string _Name;
		
		private int _ClientID;
		
		private EntitySet<InfoTypeOne> _InfoTypeOnes;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Type()
		{
			this._InfoTypeOnes = new EntitySet<InfoTypeOne>(new Action<InfoTypeOne>(this.attach_InfoTypeOnes), new Action<InfoTypeOne>(this.detach_InfoTypeOnes));
			this._Category = default(EntityRef<Category>);
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="int")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_InfoTypeOne", Storage="_InfoTypeOnes", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<InfoTypeOne> InfoTypeOnes
		{
			get
			{
				return this._InfoTypeOnes;
			}
			set
			{
				this._InfoTypeOnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Type", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Types.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Types.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Type", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Types.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Types.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tScan")]
	public partial class Scan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ScanID;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _ScanContent;
		
		private string _FileName;
		
		private string _Description;
		
		private string _MimeType;
		
		private System.Nullable<System.DateTime> _importDate;
		
		private bool _isActive;
		
		private System.Nullable<System.Guid> _DocumentID;
		
		private System.Nullable<System.Guid> _OriginalScanID;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _ScanZoom;
		
		private System.Nullable<System.DateTime> _AssignmentDate;
		
		private int _ClientID;
		
		private int _PageCount;
		
		private EntitySet<ScanPreview> _ScanPreviews;
		
		private EntitySet<OcrContent> _OcrContents;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScanIDChanging(System.Guid value);
    partial void OnScanIDChanged();
    partial void OnScanContentChanging(System.Data.Linq.Binary value);
    partial void OnScanContentChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnimportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnimportDateChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnDocumentIDChanging(System.Nullable<System.Guid> value);
    partial void OnDocumentIDChanged();
    partial void OnOriginalScanIDChanging(System.Nullable<System.Guid> value);
    partial void OnOriginalScanIDChanged();
    partial void OnScanZoomChanging(System.Data.Linq.Binary value);
    partial void OnScanZoomChanged();
    partial void OnAssignmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignmentDateChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnPageCountChanging(int value);
    partial void OnPageCountChanged();
    #endregion
		
		public Scan()
		{
			this._ScanPreviews = new EntitySet<ScanPreview>(new Action<ScanPreview>(this.attach_ScanPreviews), new Action<ScanPreview>(this.detach_ScanPreviews));
			this._OcrContents = new EntitySet<OcrContent>(new Action<OcrContent>(this.attach_OcrContents), new Action<OcrContent>(this.detach_OcrContents));
			this._Client = default(EntityRef<Client>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanID", AutoSync=AutoSync.OnInsert, DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid ScanID
		{
			get
			{
				return this._ScanID;
			}
			set
			{
				if ((this._ScanID != value))
				{
					this.OnScanIDChanging(value);
					this.SendPropertyChanging();
					this._ScanID = value;
					this.SendPropertyChanged("ScanID");
					this.OnScanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanContent", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ScanContent
		{
			get
			{
				return this._ScanContent.Value;
			}
			set
			{
				if ((this._ScanContent.Value != value))
				{
					this.OnScanContentChanging(value);
					this.SendPropertyChanging();
					this._ScanContent.Value = value;
					this.SendPropertyChanged("ScanContent");
					this.OnScanContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="VarChar(100)")]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_importDate", DbType="DateTime", IsDbGenerated=true)]
		public System.Nullable<System.DateTime> importDate
		{
			get
			{
				return this._importDate;
			}
			set
			{
				if ((this._importDate != value))
				{
					this.OnimportDateChanging(value);
					this.SendPropertyChanging();
					this._importDate = value;
					this.SendPropertyChanged("importDate");
					this.OnimportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL", IsDbGenerated=true)]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalScanID", DbType="UniqueIdentifier ")]
		public System.Nullable<System.Guid> OriginalScanID
		{
			get
			{
				return this._OriginalScanID;
			}
			set
			{
				if ((this._OriginalScanID != value))
				{
					this.OnOriginalScanIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalScanID = value;
					this.SendPropertyChanged("OriginalScanID");
					this.OnOriginalScanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanZoom", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ScanZoom
		{
			get
			{
				return this._ScanZoom.Value;
			}
			set
			{
				if ((this._ScanZoom.Value != value))
				{
					this.OnScanZoomChanging(value);
					this.SendPropertyChanging();
					this._ScanZoom.Value = value;
					this.SendPropertyChanged("ScanZoom");
					this.OnScanZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentDate", DbType="datetime")]
		public System.Nullable<System.DateTime> AssignmentDate
		{
			get
			{
				return this._AssignmentDate;
			}
			set
			{
				if ((this._AssignmentDate != value))
				{
					this.OnAssignmentDateChanging(value);
					this.SendPropertyChanging();
					this._AssignmentDate = value;
					this.SendPropertyChanged("AssignmentDate");
					this.OnAssignmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="int")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageCount", DbType="int")]
		public int PageCount
		{
			get
			{
				return this._PageCount;
			}
			set
			{
				if ((this._PageCount != value))
				{
					this.OnPageCountChanging(value);
					this.SendPropertyChanging();
					this._PageCount = value;
					this.SendPropertyChanged("PageCount");
					this.OnPageCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scan_ScanPreview", Storage="_ScanPreviews", ThisKey="ScanID", OtherKey="ScanID")]
		public EntitySet<ScanPreview> ScanPreviews
		{
			get
			{
				return this._ScanPreviews;
			}
			set
			{
				this._ScanPreviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scan_OcrContent", Storage="_OcrContents", ThisKey="ScanID", OtherKey="ScanID")]
		public EntitySet<OcrContent> OcrContents
		{
			get
			{
				return this._OcrContents;
			}
			set
			{
				this._OcrContents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Scan", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Scans.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Scans.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Scan", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Scans.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Scans.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScanPreviews(ScanPreview entity)
		{
			this.SendPropertyChanging();
			entity.Scan = this;
		}
		
		private void detach_ScanPreviews(ScanPreview entity)
		{
			this.SendPropertyChanging();
			entity.Scan = null;
		}
		
		private void attach_OcrContents(OcrContent entity)
		{
			this.SendPropertyChanging();
			entity.Scan = this;
		}
		
		private void detach_OcrContents(OcrContent entity)
		{
			this.SendPropertyChanging();
			entity.Scan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tInfoTypeTwo")]
	public partial class InfoTypeTwo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeTwoId;
		
		private System.Guid _DocumentID;
		
		private string _Description;
		
		private bool _Flag1;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeTwoIdChanging(int value);
    partial void OnTypeTwoIdChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFlag1Changing(bool value);
    partial void OnFlag1Changed();
    #endregion
		
		public InfoTypeTwo()
		{
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeTwoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeTwoId
		{
			get
			{
				return this._TypeTwoId;
			}
			set
			{
				if ((this._TypeTwoId != value))
				{
					this.OnTypeTwoIdChanging(value);
					this.SendPropertyChanging();
					this._TypeTwoId = value;
					this.SendPropertyChanged("TypeTwoId");
					this.OnTypeTwoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag1", DbType="bit ")]
		public bool Flag1
		{
			get
			{
				return this._Flag1;
			}
			set
			{
				if ((this._Flag1 != value))
				{
					this.OnFlag1Changing(value);
					this.SendPropertyChanging();
					this._Flag1 = value;
					this.SendPropertyChanged("Flag1");
					this.OnFlag1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_InfoTypeTwo", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.InfoTypeTwos.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.InfoTypeTwos.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Dictionaries.tHeader")]
	public partial class Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HeaderKey;
		
		private string _HeaderValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeaderKeyChanging(string value);
    partial void OnHeaderKeyChanged();
    partial void OnHeaderValueChanging(string value);
    partial void OnHeaderValueChanged();
    #endregion
		
		public Header()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderKey", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HeaderKey
		{
			get
			{
				return this._HeaderKey;
			}
			set
			{
				if ((this._HeaderKey != value))
				{
					this.OnHeaderKeyChanging(value);
					this.SendPropertyChanging();
					this._HeaderKey = value;
					this.SendPropertyChanged("HeaderKey");
					this.OnHeaderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderValue", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string HeaderValue
		{
			get
			{
				return this._HeaderValue;
			}
			set
			{
				if ((this._HeaderValue != value))
				{
					this.OnHeaderValueChanging(value);
					this.SendPropertyChanging();
					this._HeaderValue = value;
					this.SendPropertyChanged("HeaderValue");
					this.OnHeaderValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tClient")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientDescription;
		
		private string _ClientPrefix;
		
		private bool _IsActive;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Type> _Types;
		
		private EntitySet<Scan> _Scans;
		
		private EntitySet<UsersInClient> _UsersInClients;
		
		private EntitySet<Type2> _Type2s;
		
		private EntitySet<Sender> _tSenders;
		
		private EntitySet<Document> _Documents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientDescriptionChanging(string value);
    partial void OnClientDescriptionChanged();
    partial void OnClientPrefixChanging(string value);
    partial void OnClientPrefixChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Client()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Types = new EntitySet<Type>(new Action<Type>(this.attach_Types), new Action<Type>(this.detach_Types));
			this._Scans = new EntitySet<Scan>(new Action<Scan>(this.attach_Scans), new Action<Scan>(this.detach_Scans));
			this._UsersInClients = new EntitySet<UsersInClient>(new Action<UsersInClient>(this.attach_UsersInClients), new Action<UsersInClient>(this.detach_UsersInClients));
			this._Type2s = new EntitySet<Type2>(new Action<Type2>(this.attach_Type2s), new Action<Type2>(this.detach_Type2s));
			this._tSenders = new EntitySet<Sender>(new Action<Sender>(this.attach_tSenders), new Action<Sender>(this.detach_tSenders));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientDescription", DbType="VarChar(1000)")]
		public string ClientDescription
		{
			get
			{
				return this._ClientDescription;
			}
			set
			{
				if ((this._ClientDescription != value))
				{
					this.OnClientDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ClientDescription = value;
					this.SendPropertyChanged("ClientDescription");
					this.OnClientDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPrefix", DbType="VarChar(10)")]
		public string ClientPrefix
		{
			get
			{
				return this._ClientPrefix;
			}
			set
			{
				if ((this._ClientPrefix != value))
				{
					this.OnClientPrefixChanging(value);
					this.SendPropertyChanging();
					this._ClientPrefix = value;
					this.SendPropertyChanged("ClientPrefix");
					this.OnClientPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Group", Storage="_Groups", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Category", Storage="_Categories", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Type", Storage="_Types", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Type> Types
		{
			get
			{
				return this._Types;
			}
			set
			{
				this._Types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Scan", Storage="_Scans", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Scan> Scans
		{
			get
			{
				return this._Scans;
			}
			set
			{
				this._Scans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UsersInClient", Storage="_UsersInClients", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<UsersInClient> UsersInClients
		{
			get
			{
				return this._UsersInClients;
			}
			set
			{
				this._UsersInClients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Type2", Storage="_Type2s", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Type2> Type2s
		{
			get
			{
				return this._Type2s;
			}
			set
			{
				this._Type2s.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Sender", Storage="_tSenders", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Sender> Senders
		{
			get
			{
				return this._tSenders;
			}
			set
			{
				this._tSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Document", Storage="_Documents", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Scans(Scan entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Scans(Scan entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_UsersInClients(UsersInClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_UsersInClients(UsersInClient entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Type2s(Type2 entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Type2s(Type2 entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_tSenders(Sender entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_tSenders(Sender entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Configuration.tUsersInClients")]
	public partial class UsersInClient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private int _ClientID;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public UsersInClient()
		{
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_UsersInClient", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.UsersInClients.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.UsersInClients.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OCRText")]
	public partial class OcrContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OCRTextID;
		
		private System.Guid _ScanID;
		
		private int _PageNumber;
		
		private string _TextContent;
		
		private EntityRef<Scan> _Scan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOCRTextIDChanging(int value);
    partial void OnOCRTextIDChanged();
    partial void OnScanIDChanging(System.Guid value);
    partial void OnScanIDChanged();
    partial void OnPageNumberChanging(int value);
    partial void OnPageNumberChanged();
    partial void OnTextContentChanging(string value);
    partial void OnTextContentChanged();
    #endregion
		
		public OcrContent()
		{
			this._Scan = default(EntityRef<Scan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCRTextID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OCRTextID
		{
			get
			{
				return this._OCRTextID;
			}
			set
			{
				if ((this._OCRTextID != value))
				{
					this.OnOCRTextIDChanging(value);
					this.SendPropertyChanging();
					this._OCRTextID = value;
					this.SendPropertyChanged("OCRTextID");
					this.OnOCRTextIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScanID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScanID
		{
			get
			{
				return this._ScanID;
			}
			set
			{
				if ((this._ScanID != value))
				{
					if (this._Scan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScanIDChanging(value);
					this.SendPropertyChanging();
					this._ScanID = value;
					this.SendPropertyChanged("ScanID");
					this.OnScanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageNumber", DbType="Int NOT NULL")]
		public int PageNumber
		{
			get
			{
				return this._PageNumber;
			}
			set
			{
				if ((this._PageNumber != value))
				{
					this.OnPageNumberChanging(value);
					this.SendPropertyChanging();
					this._PageNumber = value;
					this.SendPropertyChanged("PageNumber");
					this.OnPageNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="textContent", Storage="_TextContent", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextContent
		{
			get
			{
				return this._TextContent;
			}
			set
			{
				if ((this._TextContent != value))
				{
					this.OnTextContentChanging(value);
					this.SendPropertyChanging();
					this._TextContent = value;
					this.SendPropertyChanged("TextContent");
					this.OnTextContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scan_OcrContent", Storage="_Scan", ThisKey="ScanID", OtherKey="ScanID", IsForeignKey=true)]
		public Scan Scan
		{
			get
			{
				return this._Scan.Entity;
			}
			set
			{
				Scan previousValue = this._Scan.Entity;
				if (((previousValue != value) 
							|| (this._Scan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scan.Entity = null;
						previousValue.OcrContents.Remove(this);
					}
					this._Scan.Entity = value;
					if ((value != null))
					{
						value.OcrContents.Add(this);
						this._ScanID = value.ScanID;
					}
					else
					{
						this._ScanID = default(System.Guid);
					}
					this.SendPropertyChanged("Scan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OCRLog")]
	public partial class OcrLogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _OCRLogDate;
		
		private int _ScansOCRed;
		
		private int _ScansUnOCRable;
		
		private int _ScansTotal;
		
		private int _ScansPagesOCRed;
		
		private int _ScansRemainedToOCR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOCRLogDateChanging(System.DateTime value);
    partial void OnOCRLogDateChanged();
    partial void OnScansOCRedChanging(int value);
    partial void OnScansOCRedChanged();
    partial void OnScansUnOCRableChanging(int value);
    partial void OnScansUnOCRableChanged();
    partial void OnScansTotalChanging(int value);
    partial void OnScansTotalChanged();
    partial void OnScansPagesOCRedChanging(int value);
    partial void OnScansPagesOCRedChanged();
    partial void OnScansRemainedToOCRChanging(int value);
    partial void OnScansRemainedToOCRChanged();
    #endregion
		
		public OcrLogEntry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCRLogDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime OCRLogDate
		{
			get
			{
				return this._OCRLogDate;
			}
			set
			{
				if ((this._OCRLogDate != value))
				{
					this.OnOCRLogDateChanging(value);
					this.SendPropertyChanging();
					this._OCRLogDate = value;
					this.SendPropertyChanged("OCRLogDate");
					this.OnOCRLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScansOCRed", DbType="Int NOT NULL")]
		public int ScansOCRed
		{
			get
			{
				return this._ScansOCRed;
			}
			set
			{
				if ((this._ScansOCRed != value))
				{
					this.OnScansOCRedChanging(value);
					this.SendPropertyChanging();
					this._ScansOCRed = value;
					this.SendPropertyChanged("ScansOCRed");
					this.OnScansOCRedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScansUnOCRable", DbType="Int NOT NULL")]
		public int ScansUnOCRable
		{
			get
			{
				return this._ScansUnOCRable;
			}
			set
			{
				if ((this._ScansUnOCRable != value))
				{
					this.OnScansUnOCRableChanging(value);
					this.SendPropertyChanging();
					this._ScansUnOCRable = value;
					this.SendPropertyChanged("ScansUnOCRable");
					this.OnScansUnOCRableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScansTotal", DbType="Int NOT NULL")]
		public int ScansTotal
		{
			get
			{
				return this._ScansTotal;
			}
			set
			{
				if ((this._ScansTotal != value))
				{
					this.OnScansTotalChanging(value);
					this.SendPropertyChanging();
					this._ScansTotal = value;
					this.SendPropertyChanged("ScansTotal");
					this.OnScansTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScansPagesOCRed", DbType="Int NOT NULL")]
		public int ScansPagesOCRed
		{
			get
			{
				return this._ScansPagesOCRed;
			}
			set
			{
				if ((this._ScansPagesOCRed != value))
				{
					this.OnScansPagesOCRedChanging(value);
					this.SendPropertyChanging();
					this._ScansPagesOCRed = value;
					this.SendPropertyChanged("ScansPagesOCRed");
					this.OnScansPagesOCRedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScansRemainedToOCR", DbType="Int NOT NULL")]
		public int ScansRemainedToOCR
		{
			get
			{
				return this._ScansRemainedToOCR;
			}
			set
			{
				if ((this._ScansRemainedToOCR != value))
				{
					this.OnScansRemainedToOCRChanging(value);
					this.SendPropertyChanging();
					this._ScansRemainedToOCR = value;
					this.SendPropertyChanged("ScansRemainedToOCR");
					this.OnScansRemainedToOCRChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Dictionaries.tType2")]
	public partial class Type2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type2ID;
		
		private string _Name;
		
		private int _ClientID;
		
		private EntitySet<InfoTypeOne> _InfoTypeOnes;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnType2IDChanging(int value);
    partial void OnType2IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Type2()
		{
			this._InfoTypeOnes = new EntitySet<InfoTypeOne>(new Action<InfoTypeOne>(this.attach_InfoTypeOnes), new Action<InfoTypeOne>(this.detach_InfoTypeOnes));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type2ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Type2ID
		{
			get
			{
				return this._Type2ID;
			}
			set
			{
				if ((this._Type2ID != value))
				{
					this.OnType2IDChanging(value);
					this.SendPropertyChanging();
					this._Type2ID = value;
					this.SendPropertyChanged("Type2ID");
					this.OnType2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type2_InfoTypeOne", Storage="_InfoTypeOnes", ThisKey="Type2ID", OtherKey="Type2ID")]
		public EntitySet<InfoTypeOne> InfoTypeOnes
		{
			get
			{
				return this._InfoTypeOnes;
			}
			set
			{
				this._InfoTypeOnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Type2", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Type2s.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Type2s.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Type2 = this;
		}
		
		private void detach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Type2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tInfoTypeOne")]
	public partial class InfoTypeOne : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeOneID;
		
		private System.Guid _DocumentID;
		
		private string _DocumentNumber;
		
		private string _CaseNumber;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _Type2ID;
		
		private string _Tags;
		
		private EntityRef<Type2> _Type2;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Type> _Type;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeOneIDChanging(int value);
    partial void OnTypeOneIDChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnCaseNumberChanging(string value);
    partial void OnCaseNumberChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnType2IDChanging(System.Nullable<int> value);
    partial void OnType2IDChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public InfoTypeOne()
		{
			this._Type2 = default(EntityRef<Type2>);
			this._Category = default(EntityRef<Category>);
			this._Type = default(EntityRef<Type>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOneID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeOneID
		{
			get
			{
				return this._TypeOneID;
			}
			set
			{
				if ((this._TypeOneID != value))
				{
					this.OnTypeOneIDChanging(value);
					this.SendPropertyChanging();
					this._TypeOneID = value;
					this.SendPropertyChanged("TypeOneID");
					this.OnTypeOneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(256)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNumber", DbType="NVarChar(256)")]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this.OnCaseNumberChanging(value);
					this.SendPropertyChanging();
					this._CaseNumber = value;
					this.SendPropertyChanged("CaseNumber");
					this.OnCaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type2ID", DbType="Int")]
		public System.Nullable<int> Type2ID
		{
			get
			{
				return this._Type2ID;
			}
			set
			{
				if ((this._Type2ID != value))
				{
					if (this._Type2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType2IDChanging(value);
					this.SendPropertyChanging();
					this._Type2ID = value;
					this.SendPropertyChanged("Type2ID");
					this.OnType2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="tags", Storage="_Tags", DbType="VarChar(200)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type2_InfoTypeOne", Storage="_Type2", ThisKey="Type2ID", OtherKey="Type2ID", IsForeignKey=true)]
		public Type2 Type2
		{
			get
			{
				return this._Type2.Entity;
			}
			set
			{
				Type2 previousValue = this._Type2.Entity;
				if (((previousValue != value) 
							|| (this._Type2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type2.Entity = null;
						previousValue.InfoTypeOnes.Remove(this);
					}
					this._Type2.Entity = value;
					if ((value != null))
					{
						value.InfoTypeOnes.Add(this);
						this._Type2ID = value.Type2ID;
					}
					else
					{
						this._Type2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Type2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_InfoTypeOne", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.InfoTypeOnes.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.InfoTypeOnes.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_InfoTypeOne", Storage="_Type", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.InfoTypeOnes.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.InfoTypeOnes.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_InfoTypeOne", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.InfoTypeOnes.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.InfoTypeOnes.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.vDocumentInfo")]
	public partial class DocumentInfo
	{
		
		private System.Guid _DocumentID;
		
		private int _TypeOneID;
		
		private int _TypeTwoID;
		
		private string _UserName;
		
		private System.DateTime _CreateDate;
		
		private string _DocumentNumber;
		
		private string _CaseNumber;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _CategoryID;
		
		private System.Nullable<int> _TypeID;
		
		private string _Description;
		
		private int _ClientID;
		
		private string _Tags;
		
		private System.Nullable<int> _Type2ID;
		
		private string _Sender;
		
		public DocumentInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this._DocumentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOneID", DbType="Int NOT NULL")]
		public int TypeOneID
		{
			get
			{
				return this._TypeOneID;
			}
			set
			{
				if ((this._TypeOneID != value))
				{
					this._TypeOneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeTwoID", DbType="Int NOT NULL")]
		public int TypeTwoID
		{
			get
			{
				return this._TypeTwoID;
			}
			set
			{
				if ((this._TypeTwoID != value))
				{
					this._TypeTwoID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(256)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this._DocumentNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNumber", DbType="NVarChar(256)")]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this._CaseNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this._CategoryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(200)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this._Tags = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type2ID", DbType="Int")]
		public System.Nullable<int> Type2ID
		{
			get
			{
				return this._Type2ID;
			}
			set
			{
				if ((this._Type2ID != value))
				{
					this._Type2ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="varchar(100)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this._Sender = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tDocumentSender")]
	public partial class DocumentSender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DocumentID;
		
		private int _SenderID;
		
		private EntityRef<Sender> _tSender;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    #endregion
		
		public DocumentSender()
		{
			this._tSender = default(EntityRef<Sender>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._tSender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sender_DocumentSender", Storage="_tSender", ThisKey="SenderID", OtherKey="SenderID", IsForeignKey=true)]
		public Sender Sender
		{
			get
			{
				return this._tSender.Entity;
			}
			set
			{
				Sender previousValue = this._tSender.Entity;
				if (((previousValue != value) 
							|| (this._tSender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tSender.Entity = null;
						previousValue.DocumentSenders.Remove(this);
					}
					this._tSender.Entity = value;
					if ((value != null))
					{
						value.DocumentSenders.Add(this);
						this._SenderID = value.SenderID;
					}
					else
					{
						this._SenderID = default(int);
					}
					this.SendPropertyChanged("Sender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSender", Storage="_Document", ThisKey="DocumentID", OtherKey="DocumentID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentSenders.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentSenders.Add(this);
						this._DocumentID = value.DocumentID;
					}
					else
					{
						this._DocumentID = default(System.Guid);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tSender")]
	public partial class Sender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SenderID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Company;
		
		private string _Position;
		
		private string _Email;
		
		private string _Webpage;
		
		private string _PhoneWork;
		
		private string _PhoneHome;
		
		private string _PhoneMobile;
		
		private string _FaxWork;
		
		private string _Notes;
		
		private int _ClientID;
		
		private string _PostCode;
		
		private string _City;
		
		private string _Post;
		
		private string _Street;
		
		private string _Building;
		
		private string _Flat;
		
		private EntitySet<DocumentSender> _DocumentSenders;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSenderIDChanging(int value);
    partial void OnSenderIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebpageChanging(string value);
    partial void OnWebpageChanged();
    partial void OnPhoneWorkChanging(string value);
    partial void OnPhoneWorkChanged();
    partial void OnPhoneHomeChanging(string value);
    partial void OnPhoneHomeChanged();
    partial void OnPhoneMobileChanging(string value);
    partial void OnPhoneMobileChanged();
    partial void OnFaxWorkChanging(string value);
    partial void OnFaxWorkChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostChanging(string value);
    partial void OnPostChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnFlatChanging(string value);
    partial void OnFlatChanged();
    #endregion
		
		public Sender()
		{
			this._DocumentSenders = new EntitySet<DocumentSender>(new Action<DocumentSender>(this.attach_DocumentSenders), new Action<DocumentSender>(this.detach_DocumentSenders));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(150)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(60)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Webpage", DbType="NVarChar(150)")]
		public string Webpage
		{
			get
			{
				return this._Webpage;
			}
			set
			{
				if ((this._Webpage != value))
				{
					this.OnWebpageChanging(value);
					this.SendPropertyChanging();
					this._Webpage = value;
					this.SendPropertyChanged("Webpage");
					this.OnWebpageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneWork", DbType="NVarChar(50)")]
		public string PhoneWork
		{
			get
			{
				return this._PhoneWork;
			}
			set
			{
				if ((this._PhoneWork != value))
				{
					this.OnPhoneWorkChanging(value);
					this.SendPropertyChanging();
					this._PhoneWork = value;
					this.SendPropertyChanged("PhoneWork");
					this.OnPhoneWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneHome", DbType="NVarChar(50)")]
		public string PhoneHome
		{
			get
			{
				return this._PhoneHome;
			}
			set
			{
				if ((this._PhoneHome != value))
				{
					this.OnPhoneHomeChanging(value);
					this.SendPropertyChanging();
					this._PhoneHome = value;
					this.SendPropertyChanged("PhoneHome");
					this.OnPhoneHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneMobile", DbType="NVarChar(50)")]
		public string PhoneMobile
		{
			get
			{
				return this._PhoneMobile;
			}
			set
			{
				if ((this._PhoneMobile != value))
				{
					this.OnPhoneMobileChanging(value);
					this.SendPropertyChanging();
					this._PhoneMobile = value;
					this.SendPropertyChanged("PhoneMobile");
					this.OnPhoneMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxWork", DbType="NVarChar(50)")]
		public string FaxWork
		{
			get
			{
				return this._FaxWork;
			}
			set
			{
				if ((this._FaxWork != value))
				{
					this.OnFaxWorkChanging(value);
					this.SendPropertyChanging();
					this._FaxWork = value;
					this.SendPropertyChanged("FaxWork");
					this.OnFaxWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(20)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Post", DbType="VarChar(100)")]
		public string Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				if ((this._Post != value))
				{
					this.OnPostChanging(value);
					this.SendPropertyChanging();
					this._Post = value;
					this.SendPropertyChanged("Post");
					this.OnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="VarChar(100)")]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="VarChar(10)")]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flat", DbType="VarChar(10)")]
		public string Flat
		{
			get
			{
				return this._Flat;
			}
			set
			{
				if ((this._Flat != value))
				{
					this.OnFlatChanging(value);
					this.SendPropertyChanging();
					this._Flat = value;
					this.SendPropertyChanged("Flat");
					this.OnFlatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sender_DocumentSender", Storage="_DocumentSenders", ThisKey="SenderID", OtherKey="SenderID")]
		public EntitySet<DocumentSender> DocumentSenders
		{
			get
			{
				return this._DocumentSenders;
			}
			set
			{
				this._DocumentSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Sender", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Senders.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Senders.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentSenders(DocumentSender entity)
		{
			this.SendPropertyChanging();
			entity.Sender = this;
		}
		
		private void detach_DocumentSenders(DocumentSender entity)
		{
			this.SendPropertyChanging();
			entity.Sender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tDocument")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DocumentID;
		
		private System.Guid _Author;
		
		private System.Nullable<System.Guid> _Editor;
		
		private System.DateTime _CreateDate;
		
		private int _ClientID;
		
		private EntitySet<Scan> _Scans;
		
		private EntitySet<InfoTypeTwo> _InfoTypeTwos;
		
		private EntitySet<InfoTypeOne> _InfoTypeOnes;
		
		private EntitySet<DocumentSender> _DocumentSenders;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnAuthorChanging(System.Guid value);
    partial void OnAuthorChanged();
    partial void OnEditorChanging(System.Nullable<System.Guid> value);
    partial void OnEditorChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    #endregion
		
		public Document()
		{
			this._Scans = new EntitySet<Scan>(new Action<Scan>(this.attach_Scans), new Action<Scan>(this.detach_Scans));
			this._InfoTypeTwos = new EntitySet<InfoTypeTwo>(new Action<InfoTypeTwo>(this.attach_InfoTypeTwos), new Action<InfoTypeTwo>(this.detach_InfoTypeTwos));
			this._InfoTypeOnes = new EntitySet<InfoTypeOne>(new Action<InfoTypeOne>(this.attach_InfoTypeOnes), new Action<InfoTypeOne>(this.detach_InfoTypeOnes));
			this._DocumentSenders = new EntitySet<DocumentSender>(new Action<DocumentSender>(this.attach_DocumentSenders), new Action<DocumentSender>(this.detach_DocumentSenders));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Editor", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Scan", Storage="_Scans", ThisKey="DocumentID", OtherKey="DocumentID")]
		public EntitySet<Scan> Scans
		{
			get
			{
				return this._Scans;
			}
			set
			{
				this._Scans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_InfoTypeTwo", Storage="_InfoTypeTwos", ThisKey="DocumentID", OtherKey="DocumentID")]
		public EntitySet<InfoTypeTwo> InfoTypeTwos
		{
			get
			{
				return this._InfoTypeTwos;
			}
			set
			{
				this._InfoTypeTwos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_InfoTypeOne", Storage="_InfoTypeOnes", ThisKey="DocumentID", OtherKey="DocumentID")]
		public EntitySet<InfoTypeOne> InfoTypeOnes
		{
			get
			{
				return this._InfoTypeOnes;
			}
			set
			{
				this._InfoTypeOnes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSender", Storage="_DocumentSenders", ThisKey="DocumentID", OtherKey="DocumentID")]
		public EntitySet<DocumentSender> DocumentSenders
		{
			get
			{
				return this._DocumentSenders;
			}
			set
			{
				this._DocumentSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Document", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scans(Scan entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Scans(Scan entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_InfoTypeTwos(InfoTypeTwo entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_InfoTypeTwos(InfoTypeTwo entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_InfoTypeOnes(InfoTypeOne entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentSenders(DocumentSender entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentSenders(DocumentSender entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Documents.tDocumentInfoHistory")]
	public partial class DocumentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentInfoHistoryID;
		
		private System.Nullable<System.Guid> _Editor;
		
		private System.DateTime _EntryDate;
		
		private System.Guid _DocumentID;
		
		private string _DocumentNumber;
		
		private string _CaseNumber;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _DocumentCategory;
		
		private string _DocumentType;
		
		private string _Sender;
		
		private string _Description;
		
		private string _DocumentType2;
		
		private string _Tags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentInfoHistoryIDChanging(int value);
    partial void OnDocumentInfoHistoryIDChanged();
    partial void OnEditorChanging(System.Nullable<System.Guid> value);
    partial void OnEditorChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnCaseNumberChanging(string value);
    partial void OnCaseNumberChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDocumentCategoryChanging(string value);
    partial void OnDocumentCategoryChanged();
    partial void OnDocumentTypeChanging(string value);
    partial void OnDocumentTypeChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDocumentType2Changing(string value);
    partial void OnDocumentType2Changed();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    #endregion
		
		public DocumentHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentInfoHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentInfoHistoryID
		{
			get
			{
				return this._DocumentInfoHistoryID;
			}
			set
			{
				if ((this._DocumentInfoHistoryID != value))
				{
					this.OnDocumentInfoHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentInfoHistoryID = value;
					this.SendPropertyChanged("DocumentInfoHistoryID");
					this.OnDocumentInfoHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Editor", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Editor
		{
			get
			{
				return this._Editor;
			}
			set
			{
				if ((this._Editor != value))
				{
					this.OnEditorChanging(value);
					this.SendPropertyChanging();
					this._Editor = value;
					this.SendPropertyChanged("Editor");
					this.OnEditorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="VarChar(200)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNumber", DbType="VarChar(200)")]
		public string CaseNumber
		{
			get
			{
				return this._CaseNumber;
			}
			set
			{
				if ((this._CaseNumber != value))
				{
					this.OnCaseNumberChanging(value);
					this.SendPropertyChanging();
					this._CaseNumber = value;
					this.SendPropertyChanged("CaseNumber");
					this.OnCaseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentCategory", DbType="VarChar(200)")]
		public string DocumentCategory
		{
			get
			{
				return this._DocumentCategory;
			}
			set
			{
				if ((this._DocumentCategory != value))
				{
					this.OnDocumentCategoryChanging(value);
					this.SendPropertyChanging();
					this._DocumentCategory = value;
					this.SendPropertyChanged("DocumentCategory");
					this.OnDocumentCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="VarChar(200)")]
		public string DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="VarChar(200)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType2", DbType="VarChar(200)")]
		public string DocumentType2
		{
			get
			{
				return this._DocumentType2;
			}
			set
			{
				if ((this._DocumentType2 != value))
				{
					this.OnDocumentType2Changing(value);
					this.SendPropertyChanging();
					this._DocumentType2 = value;
					this.SendPropertyChanged("DocumentType2");
					this.OnDocumentType2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="VarChar(200)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class pGetGroupRolesResult
	{
		
		private string _RoleName;
		
		public pGetGroupRolesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
	}
	
	public partial class pGetScansFromDocumentResult
	{
		
		private System.Guid _scanID;
		
		private int _hasVersions;
		
		public pGetScansFromDocumentResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scanID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid scanID
		{
			get
			{
				return this._scanID;
			}
			set
			{
				if ((this._scanID != value))
				{
					this._scanID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasVersions", DbType="Int NOT NULL")]
		public int hasVersions
		{
			get
			{
				return this._hasVersions;
			}
			set
			{
				if ((this._hasVersions != value))
				{
					this._hasVersions = value;
				}
			}
		}
	}
	
	public partial class pGetScanSiblingsResult
	{
		
		private System.Guid _scanID;
		
		private System.Nullable<char> _scanType;
		
		public pGetScanSiblingsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scanID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid scanID
		{
			get
			{
				return this._scanID;
			}
			set
			{
				if ((this._scanID != value))
				{
					this._scanID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scanType", DbType="VarChar(1)")]
		public System.Nullable<char> scanType
		{
			get
			{
				return this._scanType;
			}
			set
			{
				if ((this._scanType != value))
				{
					this._scanType = value;
				}
			}
		}
	}
	
	public partial class pGetCIDResult
	{
		
		private int _ClientID;
		
		public pGetCIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
	}
	
	public partial class pGetUserRolesInClientResult
	{
		
		private string _RoleName;
		
		public pGetUserRolesInClientResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
	}
	
	public partial class pCheckQuotaResult
	{
		
		private int _allowedCount;
		
		private int _currentCount;
		
		private System.Nullable<bool> _isViolated;
		
		public pCheckQuotaResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowedCount", DbType="Int NOT NULL")]
		public int allowedCount
		{
			get
			{
				return this._allowedCount;
			}
			set
			{
				if ((this._allowedCount != value))
				{
					this._allowedCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentCount", DbType="Int NOT NULL")]
		public int currentCount
		{
			get
			{
				return this._currentCount;
			}
			set
			{
				if ((this._currentCount != value))
				{
					this._currentCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isViolated", DbType="Bit")]
		public System.Nullable<bool> isViolated
		{
			get
			{
				return this._isViolated;
			}
			set
			{
				if ((this._isViolated != value))
				{
					this._isViolated = value;
				}
			}
		}
	}
	
	public partial class pOCRGetConfigurationResult
	{
		
		private string _OCRStartHour;
		
		private string _OCREndHour;
		
		private string _OCREnabled;
		
		public pOCRGetConfigurationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCRStartHour", DbType="VarChar(100)")]
		public string OCRStartHour
		{
			get
			{
				return this._OCRStartHour;
			}
			set
			{
				if ((this._OCRStartHour != value))
				{
					this._OCRStartHour = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCREndHour", DbType="VarChar(100)")]
		public string OCREndHour
		{
			get
			{
				return this._OCREndHour;
			}
			set
			{
				if ((this._OCREndHour != value))
				{
					this._OCREndHour = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCREnabled", DbType="VarChar(100)")]
		public string OCREnabled
		{
			get
			{
				return this._OCREnabled;
			}
			set
			{
				if ((this._OCREnabled != value))
				{
					this._OCREnabled = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
